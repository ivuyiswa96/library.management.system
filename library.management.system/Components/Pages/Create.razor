@inject IBookService BookService
@inject IJSRuntime JS
@using Models.ViewModels
@using Helpers
@using System.ComponentModel.DataAnnotations
@using library.management.system.Interfaces
@using library.management.system.Models

<div class="modal fade" id="addBookModal" tabindex="-1" aria-labelledby="addBookModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title" id="addBookModalLabel">Add Book</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" disabled="@_isLoading"></button>
            </div>

            <div class="modal-body">
                <EditForm Model="@book" FormName="AddBookForm" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <fieldset disabled="@_isLoading">
                        <div class="mb-3">
                            <label>Title:</label>
                            <InputText @bind-Value="book.Title" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label>Author:</label>
                            <InputText @bind-Value="book.Author" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label>ISBN:</label>
                            <InputText @bind-Value="book.ISBN" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label>Publication Year:</label>
                            <InputDate @bind-Value="book.PublicationYear" class="form-control" />
                        </div>
                    </fieldset>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled="@_isLoading">Cancel</button>
                        @if (_isLoading)
                        {
                            <button class="btn btn-primary" disabled>
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                Saving...
                            </button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-primary">Save</button>
                        }
                    </div>
                </EditForm>
            </div>

        </div>
    </div>
</div>

@code {
    private BookViewModel book = new();

    private bool _isRendered = false;
    private bool _isLoading = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _isRendered = true;
        }
    }

    private async Task HandleSubmit()
    {
        _isLoading = true;
        StateHasChanged();

        var entity = MapHelper.Map<Book, BookViewModel>(new Book(), book);
        await BookService.AddAsync(entity);

        book = new BookViewModel();

        if (_isRendered)
        {
            await JS.InvokeVoidAsync("modalHelper.hideModal", "#addBookModal");
        }

        _isLoading = false;
        StateHasChanged();
    }
}
